generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  image         String?
  created       DateTime?     @default(now())
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  teams         TeamUser[]
  entries       Entry[]
  PitResponse   PitResponse[]
}

model TeamUser {
  userId       String
  teamId       String
  user         User                @relation(fields: [userId], references: [id])
  team         Team                @relation(fields: [teamId], references: [id])
  status       MemberStatus
  matchEntries MatchFormResponse[]

  @@id([userId, teamId])
}

model Team {
  id          String        @id @default(cuid())
  name        String
  number      Int
  comps       Competition[]
  entries     Entry[]
  members     TeamUser[]
  matchScouts MatchForm[]
  pitScouts   PitForm[]
  inviteId    String        @unique
}

model Competition {
  id      String  @id @default(cuid())
  name    String
  team    Team    @relation(fields: [teamId], references: [id])
  teamId  String
  entries Entry[]
}

model Entry {
  id          String      @id @default(cuid())
  teamId      String
  team        Team        @relation(fields: [teamId], references: [id])
  compId      String
  competition Competition @relation(fields: [compId], references: [id])
  prescout    Boolean
  video       String?
  userId      String
  user        User        @relation(fields: [userId], references: [id])

  matchNumber     Int
  matchType       MatchType
  entryTeamNumber Int
  compName        String

  mobility           Boolean
  autoHighShotsMade  Int
  autoHighShotsTotal Int
  autoLowShotsMade   Int
  autoLowShotsTotal  Int

  teleopHighShotsMade  Int
  teleopHighShotsTotal Int
  teleopLowShotsMade   Int
  teleopLowShotsTotal  Int

  climbStart Int
  climbEnd   Int
  climbRung  RungLevel

  defended   Int[]
  defendedBy Int[]

  comments String
}

enum MemberStatus {
  CREATOR
  MEMBER
}

enum MatchType {
  QUALIFICATION
  QUARTERFINAL
  SEMIFINAL
  FINAL
}

// Rapid React Enums
enum RungLevel {
  NONE
  LOW
  MID
  HIGH
  TRAVERSAL
}

// Match scout

model MatchForm {
  id         String              @id @default(cuid())
  name       String
  teamId     String
  team       Team                @relation(fields: [teamId], references: [id])
  categories MatchFormCategory[]
}

model MatchFormCategory {
  id          String              @id @default(cuid())
  name        String
  matchFormId String
  matchForm   MatchForm           @relation(fields: [matchFormId], references: [id])
  questions   MatchFormQuestion[]
}

model MatchFormQuestion {
  id              String            @id @default(cuid())
  prompt          String
  questionType    MatchQuestionType
  promptType      MatchPromptType
  matchCategoryId String
  matchForm       MatchFormCategory @relation(fields: [matchCategoryId], references: [id])
}

model MatchFormResponse {
  id     String   @id @default(cuid())
  userId String
  teamId String
  user   TeamUser @relation(fields: [userId, teamId], references: [userId, teamId])
}

enum MatchQuestionType {
  SCORE
  COUNTER
  INPUT
  MULTIPLE
}

enum MatchPromptType {
  TEXT
  NUMBER
}

// Pit Scout

model PitForm {
  id        String        @id @default(cuid())
  name      String        @unique
  teamId    String
  team      Team          @relation(fields: [teamId], references: [id])
  questions PitQuestion[]
}

model PitQuestion {
  id                String          @id @default(cuid())
  prompt            String
  type              PitQuestionType
  possibleResponses String[]
  pitFormId         String
  pitForm           PitForm         @relation(fields: [pitFormId], references: [id])
  PitResponse       PitResponse[]
}

model PitResponse {
  id              String      @id @default(cuid())
  user            User        @relation(fields: [userId], references: [id])
  question        PitQuestion @relation(fields: [pitQuestionId], references: [id])
  response        String
  pitQuestionId   String
  entryTeamNumber Int
  userId          String
}

enum PitQuestionType {
  TEXT
  SELECT
}
