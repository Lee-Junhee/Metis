generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  teams         TeamUser[]
  entries       Entry[]
}

model TeamUser {
  userId     String
  teamNumber Int          @unique
  user       User         @relation(fields: [userId], references: [id])
  team       Team         @relation(fields: [teamNumber], references: [number])
  status     MemberStatus
}

model Team {
  name     String
  number   Int           @unique
  comps    Competition[]
  entries  Entry[]
  members  TeamUser[]
  inviteId String        @unique
}

model Competition {
  id         String  @id @default(cuid())
  name       String
  team       Team    @relation(fields: [teamNumber], references: [number])
  teamNumber Int
  entries    Entry[]
}

model Entry {
  id              String      @id @default(cuid())
  teamNumber      Int         @unique
  team            Team        @relation(fields: [teamNumber], references: [number])
  compId          String      
  competition     Competition @relation(fields: [compId], references: [id])
  userId          String      @unique
  user            User        @relation(fields: [userId], references: [id])

  matchNumber     Int
  matchType       MatchType
  eventName       String
  entryTeamNumber Int

  mobility           Boolean
  autoHighShotsMade  Int
  autoHighShotsTotal Int
  autoLowShotsMade   Int
  autoLowShotsTotal  Int

  teleopHighShotsMade  Int
  teleopHighShotsTotal Int
  teleopLowShotsMade   Int
  teleopLowShotsTotal  Int

  climbStart Int
  climbEnd   Int
  climbRung  RungLevel

  defended   Int[]
  defendedBy Int[]

  comments String
}

enum MemberStatus {
  CREATOR
  MEMBER
}

enum MatchType {
  QUALIFICATION
  QUARTERFINAL
  SEMIFINAL
  FINAL
}

// Rapid React Enums
enum RungLevel {
  NONE
  LOW
  MID
  HIGH
  TRAVERSAL
}
