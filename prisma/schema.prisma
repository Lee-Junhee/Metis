generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  image          String?
  emailVerified  DateTime?
  accounts       Account[]
  sessions       Session[]
  teamsCreated   Team[]    @relation("created")
  teamsJoined    Team[]    @relation("members")
  pendingInvites Invite[]
}

model Team {
  name           String
  number         Int      @unique
  creatorId      String   @id
  creator        User     @relation("created", fields: [creatorId], references: [id])
  entries        Entry[]
  members        User[]   @relation("members")
  createdInvites Invite[]
}

model Entry {
  id                   String    @id @default(cuid())
  team                 Team      @relation(fields: [teamNumber], references: [number])
  teamNumber           Int
  
  matchNumber          Int
  matchType            MatchType
  eventName            String
  
  mobility             Boolean
  autoHighShotsMade    Int
  autoHighShotsTotal   Int
  autoLowShotsMade     Int
  autoLowShotsTotal    Int
  
  teleopHighShotsMade  Int
  teleopHighShotsTotal Int
  teleopLowShotsMade   Int 
  teleopLowShotsTotal  Int
  
  climbStart           Int
  climbEnd             Int
  climbRung            RungLevel
  
  defended             Int[]
  defendedBy           Int[]
  
  comments             String
}

model Invite {
  id         String @id @default(cuid())
  team       Team   @relation(fields: [teamNumber], references: [number])
  teamNumber Int    @unique
  user       User   @relation(fields: [userId], references: [id])
  userId     String
}

enum MatchType {
  QUALIFICATION
  QUARTERFINAL
  SEMIFINAL
  FINAL
}

enum RungLevel {
  NONE
  LOW
  MID
  HIGH
  TRAVERSAL
}
