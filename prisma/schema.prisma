generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

// Next-auth requirements
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  teamsCreated Team[]    @relation(name: "created")
  teamsJoined  Team[]    @relation(name: "members")
  accounts     Account[]
  sessions     Session[]
}

model Team {
  name      String
  number    Int     @unique
  creatorId String  @id
  creator   User    @relation(fields: [creatorId], references: [id], name: "created")
  members   User[]  @relation(name: "members")
  entries   Entry[]
}

model Entry {
  id          String    @id
  team        Team      @relation(fields: [teamNumber], references: [number])
  teamNumber  Int
  event       String
  matchType   MatchType
  matchNumber Int
  
  // add more fields related to rapid react
}

enum MatchType {
  QUALIFICATION
  QUARTERFINAL
  SEMIFINAL
  FINAL
}
